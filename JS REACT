(function(){
  'use strict'

  const margin = {top: 20, right: 20, bottom: 30, left: 50},
        width = 960 - margin.left - margin.right,
        height = 500 - margin.top - margin.bottom;

  const parseDate = d3.time.format("%Y-%m-%d").parse;
  
  const x = d3.time.scale()
  .range([0, width]);

  var y = d3.scale.linear()
    .range([height, 0]);
  
  const xAxis = d3.svg.axis()
  .scale(x)
  .ticks(20)
  .orient("bottom");

  const yAxis = d3.svg.axis()
      .scale(y)
      .orient("left");

  var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
  
  let numberF = d3.format("0,000");
  
  var tip = d3.tip()
  .attr('class', 'd3-tip')
  .offset([-10, 0])
  .html(function(d) {
    return `<p>$${numberF(d.value)} Billions</p>
            <p>${d.date.getFullYear()} - ${months[d.date.getMonth()]}</p>`;
  })

  
  const area = d3.svg.area()
      .x(function(d) { return x(d.date); })
      .y0(height) 
      .y1(function(d) { return y(d.value); });

  const svg = d3.select(".graph").append("svg")
      .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  svg.call(tip);
  $.getJSON("https://raw.githubusercontent.com/FreeCodeCamp/ProjectReferenceData/master/GDP-data.json", function(json){
   
    let dataList = json.data;
    dataList = dataList.map(function(data) {
      const ret = {};
      ret.date = parseDate(data[0]);
      ret.value = +data[1];
      return ret;
    });
    
      x.domain(d3.extent(dataList, function(d) { return d.date; }));
      y.domain([0, d3.max(dataList, function(d) { return d.value; })]);
    
    var area = d3.svg.area()
    .x(function(d) { return x(d.date); })
    .y0(height)
    .y1(function(d) { return y(d.value); });

    
    svg.append("path")
      .datum(dataList)
      .attr("class", "area")
      .attr("d", area);
    
     svg.selectAll(".bar")
      .data(dataList)
    .enter().append("rect")
      .attr("class", "bar")
      .attr("x", function(d) { return x(d.date); })
      .attr("width", "4px")
      .attr("y", function(d) { return y(d.value); })
      .attr("height", function(d) { return height - y(d.value); })
      .on('mouseover', tip.show)
      .on('mouseout', tip.hide)

    
    svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis);

    svg.append("g")
        .attr("class", "y axis")
        .call(yAxis)
      .append("text")
        .attr("transform", "rotate(-90)")
        .attr("y", 6)
        .attr("dy", ".71em")
        .style("text-anchor", "end")
        .text(json.name);
    
  $('.description').text(json.description);
  
});
})();



//analytics
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-66606764-16', 'auto');
  ga('send', 'pageview');
